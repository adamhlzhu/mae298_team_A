import numpy as np
phase_info = {   'pre_mission': {'include_takeoff': False, 'optimize_mass': True},
    'climb_1': {   'subsystem_options': {   'core_aerodynamics': {   'method': 'computed'}},
                   'user_options': {   'num_segments': 3,
                                       'order': 3,
                                       'mach_optimize': False,
                                       'mach_polynomial_order': 1,
                                       'mach_initial': (   np.float64(0.3),
                                                           'unitless'),
                                       'mach_final': (   np.float64(0.75),
                                                         'unitless'),
                                       'mach_bounds': (   (   np.float64(0.27999999999999997),
                                                              np.float64(0.77)),
                                                          'unitless'),
                                       'altitude_optimize': False,
                                       'altitude_polynomial_order': 1,
                                       'altitude_initial': (   np.float64(110.0),
                                                               'ft'),
                                       'altitude_final': (   np.float64(20000.0),
                                                             'ft'),
                                       'altitude_bounds': (   (   0.0,
                                                                  np.float64(20500.0)),
                                                              'ft'),
                                       'throttle_enforcement': 'path_constraint',
                                       'time_initial_bounds': (   (0.0, 0.0),
                                                                  'min'),
                                       'time_duration_bounds': (   (   np.float64(7.5),
                                                                       np.float64(22.5)),
                                                                   'min'),
                                       'distance_solve_segments': False},
                   'initial_guesses': {   'time': (   [   np.float64(0.0),
                                                          np.float64(15.0)],
                                                      'min')}},
    'cruise_1': {   'subsystem_options': {   'core_aerodynamics': {   'method': 'computed'}},
                    'user_options': {   'num_segments': 3,
                                        'order': 3,
                                        'mach_optimize': False,
                                        'mach_polynomial_order': 1,
                                        'mach_initial': (   np.float64(0.75),
                                                            'unitless'),
                                        'mach_final': (   np.float64(0.75),
                                                          'unitless'),
                                        'mach_bounds': (   (   np.float64(0.73),
                                                               np.float64(0.77)),
                                                           'unitless'),
                                        'altitude_optimize': False,
                                        'altitude_polynomial_order': 1,
                                        'altitude_initial': (   np.float64(20000.0),
                                                                'ft'),
                                        'altitude_final': (   np.float64(20000.0),
                                                              'ft'),
                                        'altitude_bounds': (   (   np.float64(19500.0),
                                                                   np.float64(20500.0)),
                                                               'ft'),
                                        'throttle_enforcement': 'boundary_constraint',
                                        'time_initial_bounds': (   (   np.float64(7.5),
                                                                       np.float64(22.5)),
                                                                   'min'),
                                        'time_duration_bounds': (   (   np.float64(30.0),
                                                                        np.float64(90.0)),
                                                                    'min'),
                                        'distance_solve_segments': False},
                    'initial_guesses': {   'time': (   [   np.float64(15.0),
                                                           np.float64(60.0)],
                                                       'min')}},
    'descent_1': {   'subsystem_options': {   'core_aerodynamics': {   'method': 'computed'}},
                     'user_options': {   'num_segments': 3,
                                         'order': 3,
                                         'mach_optimize': False,
                                         'mach_polynomial_order': 1,
                                         'mach_initial': (   np.float64(0.75),
                                                             'unitless'),
                                         'mach_final': (   np.float64(0.3),
                                                           'unitless'),
                                         'mach_bounds': (   (   np.float64(0.27999999999999997),
                                                                np.float64(0.77)),
                                                            'unitless'),
                                         'altitude_optimize': False,
                                         'altitude_polynomial_order': 1,
                                         'altitude_initial': (   np.float64(20000.0),
                                                                 'ft'),
                                         'altitude_final': (   np.float64(15.0),
                                                               'ft'),
                                         'altitude_bounds': (   (   0.0,
                                                                    np.float64(20500.0)),
                                                                'ft'),
                                         'throttle_enforcement': 'path_constraint',
                                         'time_initial_bounds': (   (   np.float64(37.5),
                                                                        np.float64(112.5)),
                                                                    'min'),
                                         'time_duration_bounds': (   (   np.float64(7.5),
                                                                         np.float64(22.5)),
                                                                     'min'),
                                         'distance_solve_segments': False},
                     'initial_guesses': {   'time': (   [   np.float64(75.0),
                                                            np.float64(15.0)],
                                                        'min')}},
    'post_mission': {   'include_landing': False,
                        'constrain_range': True,
                        'target_range': (np.float64(675.07), 'nmi')}}

import aviary.api as av

prob = av.run_aviary(
    'Aviary/aviary/models/aircraft/test_aircraft/aircraft_for_bench_FwFm.csv',
    phase_info,
    optimizer='SLSQP',
    make_plots=True,
    max_iter=100,
)